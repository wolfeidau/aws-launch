// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import launcher "github.com/wolfeidau/aws-launch/pkg/launcher"
import mock "github.com/stretchr/testify/mock"

// Launcher is an autogenerated mock type for the Launcher type
type Launcher struct {
	mock.Mock
}

// CleanupTask provides a mock function with given fields: _a0
func (_m *Launcher) CleanupTask(_a0 *launcher.CleanupTaskParams) (*launcher.CleanupTaskResult, error) {
	ret := _m.Called(_a0)

	var r0 *launcher.CleanupTaskResult
	if rf, ok := ret.Get(0).(func(*launcher.CleanupTaskParams) *launcher.CleanupTaskResult); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*launcher.CleanupTaskResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*launcher.CleanupTaskParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DefineTask provides a mock function with given fields: _a0
func (_m *Launcher) DefineTask(_a0 *launcher.DefineTaskParams) (*launcher.DefineTaskResult, error) {
	ret := _m.Called(_a0)

	var r0 *launcher.DefineTaskResult
	if rf, ok := ret.Get(0).(func(*launcher.DefineTaskParams) *launcher.DefineTaskResult); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*launcher.DefineTaskResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*launcher.DefineTaskParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskLogs provides a mock function with given fields: _a0
func (_m *Launcher) GetTaskLogs(_a0 *launcher.GetTaskLogsParams) (*launcher.GetTaskLogsResult, error) {
	ret := _m.Called(_a0)

	var r0 *launcher.GetTaskLogsResult
	if rf, ok := ret.Get(0).(func(*launcher.GetTaskLogsParams) *launcher.GetTaskLogsResult); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*launcher.GetTaskLogsResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*launcher.GetTaskLogsParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskStatus provides a mock function with given fields: _a0
func (_m *Launcher) GetTaskStatus(_a0 *launcher.GetTaskStatusParams) (*launcher.GetTaskStatusResult, error) {
	ret := _m.Called(_a0)

	var r0 *launcher.GetTaskStatusResult
	if rf, ok := ret.Get(0).(func(*launcher.GetTaskStatusParams) *launcher.GetTaskStatusResult); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*launcher.GetTaskStatusResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*launcher.GetTaskStatusParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LaunchTask provides a mock function with given fields: _a0
func (_m *Launcher) LaunchTask(_a0 *launcher.LaunchTaskParams) (*launcher.LaunchTaskResult, error) {
	ret := _m.Called(_a0)

	var r0 *launcher.LaunchTaskResult
	if rf, ok := ret.Get(0).(func(*launcher.LaunchTaskParams) *launcher.LaunchTaskResult); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*launcher.LaunchTaskResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*launcher.LaunchTaskParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitForTask provides a mock function with given fields: _a0
func (_m *Launcher) WaitForTask(_a0 *launcher.WaitForTaskParams) (*launcher.WaitForTaskResult, error) {
	ret := _m.Called(_a0)

	var r0 *launcher.WaitForTaskResult
	if rf, ok := ret.Get(0).(func(*launcher.WaitForTaskParams) *launcher.WaitForTaskResult); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*launcher.WaitForTaskResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*launcher.WaitForTaskParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
